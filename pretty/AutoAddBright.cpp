#include "AutoAddBright.h" 
#define MIN2(a, b) ((a) < (b) ? (a) : (b))
#define MAX2(a, b) ((a) > (b) ? (a) : (b))
#define CLIP3(x, a, b) MIN2(MAX2(a,x), b)
#define CHANNEL 3

unsigned char* AutoAddBright(unsigned char* srcData, int height, int width, int stride, int ratio)
{
	int res = 0;
	int i, j, avgColorR = 0, avgColorG = 0, avgColorB = 0, Gray, colorMap1, colorScreen2, alpha, versionGray = 150;
	//int colorScreen;
	int offset = stride - width * CHANNEL;
	int len = width * height;
	unsigned char* pSrc = srcData;
	//unsigned char Map[256] = {0, 1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 184, 185, 186, 186, 187, 188, 189, 190, 191, 191, 192, 193, 194, 195, 196, 196, 197, 198, 199, 200, 200, 201, 202, 203, 203, 204, 205, 206, 207, 207, 208, 209, 210, 210, 211, 212, 213, 213, 214, 215, 215, 216, 217, 218, 218, 219, 220, 220, 221, 222, 223, 223, 224, 225, 225, 226, 227, 228, 228, 229, 230, 230, 231, 232, 232, 233, 234, 234, 235, 236, 236, 237, 238, 238, 239, 240, 240, 241, 242, 242, 243, 244, 244, 245, 246, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 254, 254, 255};
	unsigned char Map[256] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
	/*for(i = 0; i < 255; i++)
	{
		Map[i] = MIN2(i + 1,255);
	}*/
	for(j = 0; j < height; j++)
	{
		for(i = 0; i < width; i++)
		{
			avgColorB += pSrc[0];
			avgColorG += pSrc[1];
			avgColorR += pSrc[2];
			pSrc += CHANNEL;
		}
		pSrc += offset;
	}
	avgColorB = avgColorB / len;
	avgColorG = avgColorG / len;
	avgColorR = avgColorR / len;
	Gray = (avgColorR * 306 + avgColorG * 601 + avgColorB * 117 + 512) >> 10;
	colorMap1 = Map[Gray];
	//colorScreen = (255 - ((255 - Gray)*(255-colorMap1))/255);
	alpha = MIN2(128, MAX2(0,(versionGray - Gray) * 128 / (colorMap1 - Gray)));
	pSrc -= height * stride;
	ratio = ratio * 128 / 100;
	for(j = 0; j < height; j++)
	{
		for(i = 0; i < width; i++)
		{
			colorScreen2 = ((255 - ((255 - pSrc[0])*(255 - Map[pSrc[0]])) / 255));
			colorScreen2 = (unsigned char)((alpha * colorScreen2 + (128 - alpha) * pSrc[0]) >> 7);
			pSrc[0] = (colorScreen2 * ratio + (128 - ratio) * pSrc[0]) >> 7;
			colorScreen2 = ((255 - ((255 - pSrc[1]) * (255 - Map[pSrc[1]])) / 255));
			colorScreen2 = (unsigned char)((alpha * colorScreen2 + (128 - alpha) * pSrc[1]) >> 7);
			pSrc[1] = (colorScreen2 * ratio + (128 - ratio) * pSrc[1]) >> 7;
			colorScreen2 = ((255 - ((255 - pSrc[2]) * (255 - Map[pSrc[2]])) / 255));
			colorScreen2 = (unsigned char)((alpha * colorScreen2 + (128 - alpha) * pSrc[2]) >> 7);
			pSrc[2] = (colorScreen2 * ratio + (128 - ratio) * pSrc[2]) >> 7;
			pSrc += CHANNEL;
		}
		pSrc += offset;
	}
	return srcData;
}
